import sys
from random import randint
from blockTree import *
from leaderElection import LeaderElection
from pacemaker import Pacemaker
from mempool import Mempool
from ledger import Ledger
from safety import Safety
from hashing import Hashing
TIMEOUT = 1
N = 10

def init_config():
	config = {}
	return config

class Validator(process):
	def __init__():
		self.config = init_config()
		self.file_path = "./ledger_map"

		self.ledger = Ledger(file_path)
		self.mempool = Mempool()
		self.block_tree = BlockTree(0, 0, 0, self.ledger, self.mempool)
		self.hashing = Hashing()

		self.safety = Safety("", [], self.block_tree, self.ledger)
		

		self.pacemaker = Pacemaker(self.block_tree, self.config)


		

	def setup(node_id, validators_list): 
		pass

	def run():
		self.leader_election = LeaderElection(self.validators_list, self.config.window_size, self.config.exclude_size, self.config.seed, self.ledger, self.pacemaker)	

		while not received(('done',)):
			if await(received((msgType, 5), from_= b)):
				pass
			# elif await(received(('vote_event', 5), from_= b)):
			# 	pass
			# elif await(some(received(('timeout_event', 5), from_= b))):
			# 	pass
			elif timeout(TIMEOUT):
				# pacemaker.local_timeout_round()
				debug("local timeout")




	def receive(msg= (msgType, obj), from_= b):
		output("Received Vote event from Node")

		if msgType == "local_timeout":
			self.local_timeout_round()

		elif msgType == "proposal_event":
			self.process_proposal_msg(obj)

		elif msgType == "vote_event":
			self.process_vote_msg(obj)

		elif msgType == "timeout_event":
			self.process_timeout_msg(obj)

		elif msgType == "request":
			self.mempool.insert(obj)


	def process_certificate_qc(qc):
		self.block_tree.process_qc(qc, self.node_id)
		self.leader_election.update_leaders(qc)
		self.pacemaker.advance_round(qc.vote_info.round)

	def process_proposal_msg(P):
		process_certificate_qc(P.block.qc)
		process_certificate_qc(P.high_commit_qc)

		self.pacemaker.advance_round_tc(P.last_round_tc)

		round = self.pacemaker.current_round
		leader = self.leader_election.get_leader(round)

		if P.block.round != round or P.sender != leader or P.block.author != leader:
			return

		self.block_tree.execute_and_insert(P) # Adds a new speculative state to the Ledger
		vote_msg = self.safety.make_vote(P.block, P.last_round_tc)
		if vote_msg is not None:
			l = self.leader_election.get_leader(round + 1)
			#send vote_msg to leader_election.get_leader(current_round + 1)
			send(('vote_event', vote_msg), to=l)

	def process_timeout_msg(M):
		process_certificate_qc(M.tmo_info.high_qc)
		process_certificate_qc(M.high_commit_qc)
		self.pacemaker.advance_round_tc(M.last_round_tc)
		tc = self.pacemaker.process_remote_timeout(M)
		if tc is not None:
			self.pacemaker.advance_round(tc)
			process_new_round_event(tc)

	def process_vote_msg(M):
		qc = self.block_tree.process_vote(M, self.node_id)
		if qc is not None:
			process_certificate_qc(qc)
			process_new_round_event(None)

	def process_new_round_event(last_tc):
		if self.node_id == self.leader_election.get_leader(self.pacemaker.current_round):
			# Leader code: generate proposal.
			b = self.block_tree.generate_block(self.mempool.get_transactions(),
			self.pacemaker.current_round)
			#broadcast ProposalMsghb; last tc; block_tree:high commit qci
			send(('proposal_event', ProposalMsg(b, last_tc, self.block_tree.high_commit_qc)), to=self.validators_list)

	def local_timeout_round():
		pass

class Client(process):
	def __init__():
		pass
		

	def setup(node_id, validators_list): 
		pass

	def run():
		for i in range(5):
			obj = {
				'transaction_id' : str(self.node_id*5 + i),
				'node_id' : self.node_id
			}

			send(('request', obj), to=self.validators_list)



def main():
	
	num_servers = N
	num_clients = N

	clients = new(Client, num = num_clients)
	validators = new(Validator, num= num_servers)

	#Can add new variables to setup if necessary
	for i, validator in enumerate(validators):
		setup(validator, (i, list(validators)))

	for i, client in enumerate(clients):
		setup(client, (i, list(validators)))

	start(validators)
	start(clients)
